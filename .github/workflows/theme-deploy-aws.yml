name: Reusable Theme AWS Deployment

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment name (e.g., aux-staging, bryce-production)'
        required: true
        type: string
      theme_name:
        description: 'Theme name (e.g., umctheme3-asia-campus)'
        required: true
        type: string
      tag_name:
        description: 'Tag name to deploy'
        required: true
        type: string
      delete:
        description: 'Delete files on the server that are not in the local directory'
        required: false
        type: boolean
        default: false
    secrets:
      SSH_PRIVATE_KEY:
        description: 'SSH private key for the server'
        required: true
      SSH_PORT:
        description: 'SSH port for the server'
        required: true
      SSH_USER:
        description: 'SSH user for the server'
        required: true
      SSH_HOST:
        description: 'SSH host for the server'
        required: true

jobs:
  deploy:
    name: Deploy Theme to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ inputs.tag_name }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
        else
          echo "No package.json found, skipping dependency installation"
        fi
        
    - name: Build theme
      run: |
        if [ -f package.json ] && npm run | grep -q "build"; then
          echo "Building theme..."
          npm run build
        else
          echo "No build process configured"
        fi

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Log start of deployment
      run: echo "🚀 Starting theme deployment to ${{ inputs.environment }}..."

    - name: Verify WordPress themes directory exists
      run: |
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "if [ ! -d '/var/www/html/wp-content/themes' ]; then \
            echo '❌ ERROR: WordPress themes directory not found at /var/www/html/wp-content/themes'; \
            echo 'This deployment requires a valid WordPress installation.'; \
            exit 1; \
          else \
            echo '✅ WordPress themes directory confirmed at /var/www/html/wp-content/themes'; \
          fi"
    
    - name: Create theme directory if needed
      run: |
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "cd /var/www/html/wp-content/themes && mkdir -p ${{ inputs.theme_name }} && echo '✅ Theme directory ready: /var/www/html/wp-content/themes/${{ inputs.theme_name }}'"

    - name: Deploy theme with rsync
      run: |
        rsync -avz ${{ inputs.delete && '--delete' || '' }} \
          --exclude=".*" \
          --exclude=".git/" \
          --exclude=".github/" \
          --exclude="node_modules/" \
          --exclude="package.json" \
          --exclude="package-lock.json" \
          --exclude="README.md" \
          --exclude="CHANGELOG.md" \
          --exclude=".releaserc.json" \
          --exclude=".gitignore" \
          --exclude="*.log" \
          --exclude=".DS_Store" \
          --exclude="*.md" \
          -e "ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }}" \
          ./ \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/html/wp-content/themes/${{ inputs.theme_name }}/

    - name: Write deployed version file
      run: |
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "echo '${{ inputs.tag_name }}' > /var/www/html/wp-content/themes/${{ inputs.theme_name }}/version.txt"

    - name: Deployment Summary
      run: |
        echo "🎉 AWS Theme Deployment Summary"
        echo "==============================="
        echo "Theme: ${{ inputs.theme_name }}"
        echo "Environment: ${{ inputs.environment }}"
        echo "Tag: ${{ inputs.tag_name }}"
        echo "Delete Flag: ${{ inputs.delete }}"
        echo "✅ Theme deployed successfully to ${{ inputs.environment }}!"
